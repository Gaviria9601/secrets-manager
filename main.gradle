allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.8.0'

        compileOnly 'org.projectlombok:lombok:1.18.16'
        annotationProcessor 'org.projectlombok:lombok:1.18.16'

        testCompileOnly 'org.projectlombok:lombok:1.18.16'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

        testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
        testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    }

    sonarqube {
        properties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.projectKey", "bancolombia_secrets-manager"
            property "sonar.organization", "grupo-bancolombia"
            property "sonar.host.url", "https://sonarcloud.io/"
            property "sonar.sources", "src/main"
            property "sonar.test", "src/test"
            //property "sonar.modules", "api"
            //property "sonar.sources", "async/aws-secrets-manager-async/src/main"
            //property "sonar.test", "async/aws-secrets-manager-async/src/test"
            property "sonar.java.binaries", "${rootDir}/build/classes"
            property "sonar.junit.reportPaths", "${rootDir}/build/test-results/test"
            property "sonar.java-coveragePlugin", "jacoco"
            property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/generateMergedReport/generateMergedReport.xml"
            property "sonar.exclusions", ".github/**"
        }
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_1_8

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc.failOnError = false
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "software.amazon.awssdk:bom:2.13.10"
        }
    }
}

task generateMergedReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}
